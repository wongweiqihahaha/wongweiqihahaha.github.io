foo(4)
foo(4)
foo(4)
foo <- function(z=2) {
z<-3
return(z+3)
}
foo(4)
foo(4)
sprintf("The value assigned to z outside the function is %d",z)
z <- 1
sprintf("The value assigned to z outside the function is %d",z)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
z <- 3
return(z+3)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
return(z+3)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
add_two <- function(x) { x+2
}
add_two(-34)
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo <- function(z = 2) { # reassigning z
z <- 3
return(z+3)
} foo()
foo()
mean(rnorm(sample_size))
typeof(say_hello_to)
mean(rnorm(sample_size))
typeof(say_hello_to)
knitr::opts_chunk$set(echo = TRUE)
# First define the function
calc_sample_mean <- function(sample_size,our_mean=0,our_sd=1) {
rnorm(
mean=our_mean
sd=our_sd, sample_size)
calc_sample_mean(100)
}
}
calc_sample_mean(100)
}
# First define the function
calc_sample_mean <- function(sample_size, our_mean=0, our_sd=1) {
sample <- rnorm(sample_size,
mean = our_mean,
sd = our_sd)
mean(sample)
}
calc_sample_mean(100)
calc_sample_mean(200)
calc_sample_mean(10, our_sd = 2)
calc_sample_mean(10, our_sd = 2)
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
?renderPlot()
?length.out()
?seq()
# Install package
install.packages("shiny")
# Invoke the package
library(shiny)
# Run an example from the library
runExample("01_hello")
?shinyApp()
library(shiny); runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
runApp('Week 8/App-1/Challenge 8.R')
knitr::opts_chunk$set(echo = TRUE)
![This is my challenge 8!](Home/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/NM2207/Week 8/App-1/www/submit.png)
knitr::opts_chunk$set(echo = TRUE)
(1) What is the topic that you have finalized?
?seq()
styler:::style_selection()
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
# Install and load the gridExtra package
install.packages("gridExtra")
library(gridExtra)
# Creating the data frame
topics_weeks <- data.frame(
Topics = c("Bivariate Scatter Plot", "Heat Map",
"Shiny features: Dropdown", "Shiny features: Slider",
"Shiny features: Reset Button", "ggplot2",
"ggplot", "Manipulating data: Changing Data types",
"Functions", "Loops"),
Weeks = c("Self Learnt", "Self Learnt",
"Week 8", "Week 8",
"Week 8", "Week 2",
"Week 2", "Week 3",
"Week 5", "Week 6")
)
# Create and display the table with grid lines
grid.table(topics_weeks, rows = NULL)
library(gridExtra)
# Creating the data frame
topics_weeks <- data.frame(
Topics = c("Bivariate Scatter Plot", "Heat Map",
"Shiny features: Dropdown", "Shiny features: Slider",
"Shiny features: Reset Button", "ggplot2",
"ggplot", "Manipulating data: Changing Data types",
"Functions", "Loops"),
Weeks = c("Self Learnt", "Self Learnt",
"Week 8", "Week 8",
"Week 8", "Week 2",
"Week 2", "Week 3",
"Week 5", "Week 6")
)
# Create and display the table with grid lines
grid.table(topics_weeks, rows = NULL)
library(knitr)
include_graphics("Documents/GitHub/wongweiqihahaha.github.io/page1.jpg")
library(knitr)
include_graphics("~/Documents/GitHub/wongweiqihahaha.github.io/page1.jpg")
include_graphics("~/Documents/GitHub/wongweiqihahaha.github.io/page2.jpg")
shiny::runApp('~/Documents/GitHub/wongweiqihahaha.github.io/heatmap')
runApp('~/Documents/GitHub/wongweiqihahaha.github.io/heatmap')
runApp('~/Documents/GitHub/wongweiqihahaha.github.io/heatmap')
runApp('~/Documents/GitHub/wongweiqihahaha.github.io/histogram')
runApp('~/Documents/GitHub/wongweiqihahaha.github.io/histogram')
runApp('~/Documents/GitHub/wongweiqihahaha.github.io/histogram')
runApp('~/Documents/GitHub/wongweiqihahaha.github.io/histogram')
{{< video beach.mp4>}}
{< video beach.mp4>}
setwd("~/Documents/GitHub/wongweiqihahaha.github.io")
shiny::runApp('valenceBar')
runApp('valenceBar')
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
library(dplyr)
library(tidytext)
install.packages("tidytext")
library(wordcloud)
library(dplyr)
library(tidytext)
# Read the dataset
spotify_youtube <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/spotify_youtube.csv")
# Prepare the data
word_data <- spotify_youtube %>%
unnest_tokens(word, Track) %>%  # Split 'Track' into individual words
count(word, sort = TRUE)        # Count the frequency of each word
# Create the word cloud
wordcloud(words = word_data$word, freq = word_data$n, min.freq = 1)
library(wordcloud)
library(dplyr)
library(tidytext)
spotify_youtube <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/spotify_youtube.csv")
word_data <- spotify_youtube %>%
unnest_tokens(word, Track) %>%
count(word, sort = TRUE)
wordcloud(words = word_data$word, freq = word_data$n, scale = c(3, 0.5))
library(wordcloud)
library(dplyr)
library(tidytext)
spotify_youtube <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/spotify_youtube.csv")
word_data <- spotify_youtube %>%
unnest_tokens(word, Track) %>%
count(word, sort = TRUE)
wordcloud(words = word_data$word, freq = word_data$n, min.freq = 2, max.words = 100)
install.packages("RColorBrewer")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("path/to/popularsongs.csv")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
# Function to convert month names to numbers
month_to_number <- function(month_name) {
month_name <- tolower(month_name)  # Convert to lower case for consistency
months_vec <- tolower(month.name)  # Vector of month names
return(match(month_name, months_vec))
}
# Apply this function to the released_month column
songs_data$released_month <- sapply(songs_data$released_month, month_to_number)
# Filter for 2022 and aggregate streams by month
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
# Convert streams to numeric
songs_data$streams <- as.numeric(as.character(songs_data$streams))
# Remove rows with NA in released_month
songs_data <- songs_data %>% filter(!is.na(released_month))
# Function to convert month names to numbers
month_to_number <- function(month_name) {
month_name <- tolower(month_name)  # Convert to lower case for consistency
months_vec <- tolower(month.name)  # Vector of month names
return(match(month_name, months_vec))
}
# Apply this function to the released_month column
songs_data$released_month <- sapply(songs_data$released_month, month_to_number)
# Filter for 2022 and aggregate streams by month
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
# Plotting
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
# Convert streams to numeric
songs_data$streams <- as.numeric(as.character(songs_data$streams))
# Remove rows with NA in released_month
songs_data <- songs_data %>% filter(!is.na(released_month))
# Function to convert month names to numbers
month_to_number <- function(month_name) {
month_name <- tolower(month_name)  # Convert to lower case for consistency
months_vec <- tolower(month.name)  # Vector of month names
return(match(month_name, months_vec))
}
# Apply this function to the released_month column
songs_data$released_month <- sapply(songs_data$released_month, month_to_number)
# Filter for 2022 and aggregate streams by month
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
# Plotting
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
# Convert streams to numeric
songs_data$streams <- as.numeric(as.character(songs_data$streams))
# Remove rows with NA in released_month
songs_data <- songs_data %>% filter(!is.na(released_month))
# Apply this function to the released_month column
songs_data$released_month <- sapply(songs_data$released_month, month_to_number)
# Filter for 2022 and aggregate streams by month
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
# Plotting
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
# Convert streams to numeric
songs_data$streams <- as.numeric(as.character(songs_data$streams))
# Remove rows with NA in released_month
songs_data <- songs_data %>% filter(!is.na(released_month))
# Filter for 2022 and aggregate streams by month
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
# Plotting
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
format(songs_data$streams, scientific = FALSE, big.mark = ',')
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
scale_y_continuous(labels = label_formatter) +  # Format y-axis labels
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams (in millions)")  # Updated y-axis label
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
# Plotting with month names
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
scale_x_continuous(breaks = 1:12, labels = month.name) +  # Format x-axis labels
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams (in millions)")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
# Plotting with month names
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line() +  # Line graph
geom_point() + # Points at each month
theme_minimal() +  # Minimal theme
scale_x_continuous(breaks = 1:12, labels = month.name) +  # Format x-axis labels
scale_y_continuous(labels = label_formatter) +
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams (in millions)")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
# Plotting with month names
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line(colour="pink") +  # Line graph
geom_point(colour="blue") + # Points at each month
theme_minimal(
panel.grid.major = element_line(color = "gray40", size = 0.5),
panel.grid.minor = element_line(color = "gray40", size = 0.25)
) +  # Minimal theme
scale_x_continuous(breaks = 1:12, labels = month.name) +  # Format x-axis labels
scale_y_continuous(labels = label_formatter) +
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams (in millions)")
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
# Plotting with month names
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line(colour="pink") +  # Line graph
geom_point(colour="blue") + # Points at each month
theme_minimal(panel.grid.major = element_line(color = "gray40", size = 0.5), panel.grid.minor = element_line(color = "gray40", size = 0.25)
) +  # Minimal theme
scale_x_continuous(breaks = 1:12, labels = month.name) +  # Format x-axis labels
scale_y_continuous(labels = label_formatter) +
labs(title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams (in millions)")
styler:::style_selection()
library(tidyverse)
# Load the dataset
songs_data <- read.csv("~/Documents/GitHub/wongweiqihahaha.github.io/popularsongs.csv")
songs_data$streams <- as.numeric(as.character(songs_data$streams))
songs_data <- songs_data %>% filter(!is.na(released_month))
monthly_streams_2022 <- songs_data %>%
filter(released_year == 2022) %>%
group_by(released_month) %>%
summarise(total_streams = sum(streams))
label_formatter <- function(x) {
paste0(round(x / 1e6, 1), "M")
}
# Plotting with month names
ggplot(monthly_streams_2022, aes(x = released_month, y = total_streams, group = 1)) +
geom_line(colour = "pink") + # Line graph
geom_point(colour = "blue") + # Points at each month
theme_minimal() + # Minimal theme
scale_x_continuous(breaks = 1:12, labels = month.name) + # Format x-axis labels
scale_y_continuous(labels = label_formatter) +
labs(
title = "Total Streams per Month in 2022",
x = "Month",
y = "Total Streams (in millions)"
)
setwd("~/Documents/GitHub/wongweiqihahaha.github.io")
setwd("~/Documents/GitHub/NM2207/Week-12")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error9.png"))
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error10.png"))
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error12.png"))
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error9.png"))
knitr::include_graphics(c("\~/Documents/GitHub/NM2207/Week-12/error2.png"))
knitr::include_graphics(c("\~/Documents/GitHub/NM2207/Week-12/error2.png"))
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error2.png"))
knitr::include_graphics(c("\~/Documents/GitHub/NM2207/Week-12/error4.png"))
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error4.png"))
knitr::include_graphics(c("~/Documents/GitHub/NM2207/Week-12/error13.png"))
